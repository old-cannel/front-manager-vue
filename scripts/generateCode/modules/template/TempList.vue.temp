<template>
  <a-card :bordered="false">
    <div>
      <div class="table-page-search-wrapper">
        <a-form layout="inline">
          <a-row :gutter="48">
#{LIST_QUERY_CONDITION}
            <a-col :md="8" :sm="12" :xs="24">
              <span
                class="table-page-search-submitButtons">
                <a-button type="primary" @click="$refs.tempTable.refresh(true)">查询</a-button>
                <a-button style="margin-left: 8px" @click="restQuery()">重置</a-button>
              </span>
            </a-col>
          </a-row>
        </a-form>
      </div>

      <div class="table-operator">
        <a-button type="primary" icon="plus" @click="handleAdd()">新建</a-button>
#{LIST_OPERATE_BATCH_DEL}
      </div>
    </div>
    <s-table
      ref="tempTable"
      size="default"
      :rowKey="(recordActive) => recordActive.id"
      :columns="columns"
#{LIST_ROW_SELECT}
      :data="loadData"
      showPagination="auto"
    >
#{LIST_CONTENT_SELECT}
      <span slot="action" slot-scope="text, record">
        <template>
          <a @click="handleDetail(record)">详情</a>
          <a-divider type="vertical"/>
          <a @click="handleUpdate(record)">修改</a>
          <a-divider type="vertical"/>
          <a-popconfirm title="您确认删除吗?" @confirm="handleDelete([record])" okText="确认" cancelText="取消">
            <a href="javascript:void(0)">删除</a>
          </a-popconfirm>
        </template>
      </span>
    </s-table>
    <detail
#{LIST_DETAIL}
      :record="recordActive"/>
    <add
      ref="tempAdd"
      :org-type="selectOrgType"
      :format-date="formatDate"
      :record="recordActive"
      :save="save"
      :refresh="refresh"
    />
    <edit
      ref="tempEdit"
      :record="recordActive"
      :org-type="selectOrgType"
      :update="update"
      :refresh="refresh"
      :format-date="formatDate"
      :get-moment="getMoment"
    />
  </a-card>
</template>

<script>

import { formatDate, getMoment, isEmpty } from '@/utils/common'
import { del, get, queryList, save, update } from '@/api/example/temp'
import { getDictByType } from '@/api/common'
import { STable } from '@/components'
import Detail from './components/Detail'
import Add from './components/Add'
import Edit from './components/Edit'

export default {
  name: 'TempList',
  components: {
    STable,
    Detail,
    Add,
    Edit
  },
  data () {
    return {
      // 保存方法
      save: save,
      // 修改方法
      update: update,
      // 日期工具类
      formatDate: formatDate,
      getMoment: getMoment,
      // 查询参数
      queryParam: {},
      // 列表表头
      columns: [
        {
          title: '编码',
          dataIndex: 'code',
          key: 'code '
        }, {
          title: 'name',
          dataIndex: 'name',
          key: 'name'
        }, {
          title: '新建日期',
          dataIndex: 'addTime',
          key: 'addTime'
        }, {
          title: '更新时间',
          dataIndex: 'updTime',
          key: 'updTime'
        }, {
          title: '状态',
          dataIndex: 'status',
          key: 'status',
          scopedSlots: { customRender: 'status' }
        }, {
          title: '年龄',
          dataIndex: 'age',
          key: 'age'
        }, {
          title: '自定义',
          dataIndex: 'selectCustom',
          key: 'selectCustom',
          scopedSlots: { customRender: 'selectCustom' }
        }, {
          title: '数据字典',
          dataIndex: 'selectDict',
          key: 'selectDict',
          scopedSlots: { customRender: 'selectDict' }
        },
        {
          title: '操作',
          dataIndex: 'action',
          width: '320px',
          scopedSlots: { customRender: 'action' }
        }
      ],
      // 单个记录行
      recordActive: {},
      // 列表加载数据方法
      loadData: parameter => {
        if (this.queryParam.addTimeSearch) {
          this.queryParam.addTimeSearch[0] = this.queryParam.addTimeSearch[0].format('YYYY-MM-DD')
          this.queryParam.addTimeSearch[1] = this.queryParam.addTimeSearch[1].format('YYYY-MM-DD')
        }
        if (this.queryParam.updTimeSearch) {
          this.queryParam.updTimeSearch[0] = this.queryParam.updTimeSearch[0].format('YYYY-MM-DD HH:mm:ss')
          this.queryParam.updTimeSearch[1] = this.queryParam.updTimeSearch[1].format('YYYY-MM-DD HH:mm:ss')
        }
        return queryList(Object.assign(parameter, this.queryParam))
          .then(res => {
            if (res.code === 10000) {
              return res.result
            }
          })
      },
      // 数据字典-组织类型
      orgType: [{ label: '全部', value: '' }],
      selectOrgType: [],
      // 列表选择
      options: {
        alert: {
          show: true,
          clear: () => {
            this.selectedRowKeys = []
          }
        },
        rowSelection: {
          selectedRowKeys: this.selectedRowKeys,
          onChange: this.onSelectChange
        }
      },
      selectedRowKeys: [],
      selectedRows: []
    }
  },
  created () {
    // 数据字典
    getDictByType('org_type').then(
      (res) => {
        if (res.code === 10000) {
          const dnyOrgType = res.result.map(item => {
            return { label: `${item.dictKey}`, value: `${item.dictValue}` }
          })
          this.orgType = [...this.orgType, ...dnyOrgType]
          this.selectOrgType = dnyOrgType
        }
      }
    )
  },
  computed: {},
  methods: {

    onSelectChange (selectedRowKeys, selectedRows) {
      this.selectedRowKeys = selectedRowKeys
      this.selectedRows = selectedRows
    },
    //  状态键值转换
    getStatusName (key) {
      let value = ''
      switch (key) {
        case '0':
          value = '不启用'
          break
        case '1':
          value = '启用'
          break
      }
      return value
    },
    //  自定义键值转换
    getCustomName (key) {
      let value = ''
      switch (key) {
        case '0':
          value = '无'
          break
        case '1':
          value = '有'
          break
      }
      return value
    },
    // 数据字典键值转换
    getDictName (key) {
      let value = ''
      this.selectOrgType.forEach(item => {
        if (item.value === key) {
          value = item.label
        }
      })
      return value
    },
    // 重置查询
    restQuery () {
      this.queryParam = {}
      this.$refs.tempTable.refresh(true)
    },
    // 刷新列表
    refresh () {
      this.$refs.tempTable.refresh()
    },
    // 打开详情
    handleDetail (record) {
      get(record).then(res => {
        if (res.code === 10000) {
          this.recordActive = res.result
          this.$refs.tempDetail.show()
        }
      })
    },
    // 打开新增
    handleAdd () {
      this.recordActive = {}
      this.$refs.tempAdd.show()
    },
    // 打开更新
    handleUpdate (record) {
      get(record).then(res => {
        if (res.code === 10000) {
          this.recordActive = res.result
          this.$refs.tempEdit.show()
        }
      })
    },
    // 删除记录
    handleDelete (records) {
      let ids = ''
      records.map(record => {
        ids += record.id + ','
      })
      const param = { id: ids }
      del(param).then(res => {
        if (res.code === 10000) {
          this.$message.info(res.msg)
          this.refresh()
        }
      })
    }
  }
}
</script>
